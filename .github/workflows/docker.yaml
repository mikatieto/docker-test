name: Workflow atelier 1 # Le nom de la chaine CI/CD (workflow)
# Controle de la chaine CI/CD
on:
  # Lance la chaine CI/CD lorsque un `git push` est effectué sur les branches indiquées
  push:
jobs:
  # Chaque tache (job) est représentée par un serveur, ce qui permet l'indépendance des étapes a executer.
  build-test-upload: # L'identifiant du job
    runs-on: ubuntu-latest # Choix de l'OS du job
    steps: # Sections des étapes à effectuer au sein du job
      # actions/checkout@v3 permet de télécharger votre repository github au sein du job
      # En interne, il effectue un `git clone` de votre projet puis un `git checkout`
      # au sein de la branche qui a déclenché l'evenement `push`
      - name: "[CI] Build l'environnement en récupérant le repo entier de votre branche."
        uses: actions/checkout@v3 

      # Une fois votre répertoire récupérer, vous pouvez effectuer un `ls -l` pour
      # lister et verifier que votre repository github est bien téléchargé
      - name: "[DEBUG] Lister l'arborescence de fichiers sur le serveur"
        run: | # le | permet d'ecrire plusieurs ligne de code shell au sein d'une meme etape 
          docker build . 
      # Vous pouvez écrire autant d'étapes nécessaire en déclarant à minima les directives
      # 'name:' pour nommer votre étape
      # 'run:' pour lancer une ligne de commande Shell
      # 'uses:' pour utiliser une action disponible sur github marketplace
      # NOTE choisir entre 'uses:' ou 'run:'. Impossible d'utiliser les deux au sein d'une meme étap
